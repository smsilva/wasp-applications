name: $(Date:yyyy-MM-dd)$(Rev:.r)

trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name:    environment
    type:    string
    default: wasp-sbx-na

variables:
  - template: vars/global.yaml
  - group: azure-credentials-wasp-sandbox

steps:
  - script: |
      AGENT_PATH=${PATH}:$(Agent.TempDirectory)/terraform-packager/scripts

      echo "[INFO] Build.BuildId........: $(Build.BuildId)"
      echo "[INFO] Build.BuildNumber....: $(Build.BuildNumber)"
      echo "[INFO] Build.DefinitionName.: $(Build.DefinitionName)"
      echo "[INFO] Environment..........: ${ENVIRONMENT_NAME}"

      echo "##vso[task.setvariable variable=PATH]${AGENT_PATH}"
    displayName: 'Parameters'
    env:
      ENVIRONMENT_NAME: ${{ parameters.environment }}

  - script: |
      git clone https://github.com/smsilva/terraform-packager.git $(Agent.TempDirectory)/terraform-packager
    displayName: "Clone Terraform Packager"

  - script: |
      env \
        STACK_INSTANCE_NAME=${ENVIRONMENT_NAME} \
        DEBUG=2 \
          stackrun silviosilva/azure-wasp-foundation:0.1.0 apply \
          -auto-approve \
          -var="name=${ENVIRONMENT_NAME}"

    displayName: 'Environment Stack'
    env:
      ENVIRONMENT_NAME:  ${{ parameters.environment }}
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_ACCESS_KEY:    $(ARM_ACCESS_KEY)

  - task: KubectlInstaller@0
    displayName: 'Install kubectl'
    inputs:
      kubectlVersion: 'v1.23.4'

  - script: |
      env DEBUG=2 stackrun silviosilva/azure-kubernetes-cluster:3.9.0-wasp-sbx-eus2-blue apply -auto-approve
    displayName: 'AKS Creation'
    env:
      ENVIRONMENT_NAME:  ${{ parameters.environment }}
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_ACCESS_KEY:    $(ARM_ACCESS_KEY)

  - script: |
      mkdir -p ${HOME}/.kube

      env DEBUG=0 stackrun silviosilva/azure-kubernetes-cluster:3.9.0-wasp-sbx-eus2-blue output -raw kubeconfig > ${HOME}/.kube/config

      chmod 0600 ${HOME}/.kube/config

      kubectl config get-contexts
      kubectl get namespaces
    displayName: 'AKS Get Credentials'
    env:
      ENVIRONMENT_NAME:  ${{ parameters.environment }}
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_ACCESS_KEY:    $(ARM_ACCESS_KEY)

  - task: HelmInstaller@1
    displayName: "Helm Install"
    inputs:
      helmVersionToInstall: "v3.8.0"

  - script: |
      install/ingress-nginx/install.sh
    displayName: "Install NGINX Ingress Controller"

  - script: |
      install/external-dns/install.sh
    displayName: "Install ExternalDNS"
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

  - script: |
      kubectl -n ingress-nginx get svc

      echo ""

      helm upgrade \
        --install \
        --namespace httpbin \
        --create-namespace \
        httpbin install/httpbin \
        --set "ingress.enabled=true" \
        --set "ingress.hosts[0].host=echo.sandbox.wasp.silvios.me" \
        --set "ingress.hosts[0].paths[0].path=/" \
        --set "ingress.hosts[0].paths[0].pathType=ImplementationSpecific" \
        --wait
    displayName: "Deploy httpbin with Ingress"

  - script: |
      install/argocd/install.sh
    displayName: "Install ArgoCD"
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

  - script: |
      kubectl -n ingress-nginx get svc

      echo ""

      kubectl -n argocd-infra get ing

      echo ""

      dig @8.8.8.8 argocd.sandbox.wasp.silvios.me
    displayName: "ArgoCD Information"
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
